{"/home/travis/build/npmtest/node-npmtest-gulp-git/test.js":"/* istanbul instrument in package npmtest_gulp_git */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-git/lib.npmtest_gulp_git.js":"/* istanbul instrument in package npmtest_gulp_git */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_git = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_git = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-git/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-git && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_git */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_git\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_git.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_git.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_git.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_git.__dirname + '/lib.npmtest_gulp_git.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/index.js":"'use strict';\n/**\n * git\n * @exports gulp-git\n * @property {function} add             {@link module:gulp-git/lib/add}\n * @property {function} addRemote       {@link module:gulp-git/lib/addRemote}\n * @property {function} addSubmodule    {@link module:gulp-git/lib/addSubmodule}\n * @property {function} branch          {@link module:gulp-git/lib/branch}\n * @property {function} catFile         {@link module:gulp-git/lib/catFile}\n * @property {function} checkout        {@link module:gulp-git/lib/checkout}\n * @property {function} checkoutFiles   {@link module:gulp-git/lib/checkoutFiles}\n * @property {function} clean           {@link module:gulp-git/lib/clean}\n * @property {function} clone           {@link module:gulp-git/lib/clone}\n * @property {function} commit          {@link module:gulp-git/lib/commit}\n * @property {function} diff            {@link module:gulp-git/lib/diff}\n * @property {function} exec            {@link module:gulp-git/lib/exec}\n * @property {function} fetch           {@link module:gulp-git/lib/fetch}\n * @property {function} init            {@link module:gulp-git/lib/init}\n * @property {function} merge           {@link module:gulp-git/lib/merge}\n * @property {function} pull            {@link module:gulp-git/lib/pull}\n * @property {function} push            {@link module:gulp-git/lib/push}\n * @property {function} removeRemote    {@link module:gulp-git/lib/removeRemote}\n * @property {function} reset           {@link module:gulp-git/lib/reset}\n * @property {function} revParse        {@link module:gulp-git/lib/revParse}\n * @property {function} rm              {@link module:gulp-git/lib/rm}\n * @property {function} stash           {@link module:gulp-git/lib/stash}\n * @property {function} status          {@link module:gulp-git/lib/status}\n * @property {function} tag             {@link module:gulp-git/lib/tag}\n * @property {function} updateSubmodule {@link module:gulp-git/lib/updateSubmodule}\n */\nvar requireDir = require('require-dir');\nmodule.exports = requireDir('./lib');\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/add.js":"'use strict';\n\nvar through = require('through2');\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\nvar escape = require('any-shell-escape');\n\nmodule.exports = function (opt) {\n  if (!opt) opt = {};\n  if (!opt.args) opt.args = ' ';\n\n  var paths = [];\n  var files = [];\n  var fileCwd = process.cwd;\n\n  var write = function(file, enc, cb) {\n    paths.push(file.path);\n    files.push(file);\n    fileCwd = file.cwd;\n    cb();\n  };\n\n  var flush = function(cb) {\n    var cwd = opt.cwd || fileCwd;\n\n    var cmd = 'git add ' + escape(paths) + ' ' + opt.args;\n    var that = this;\n    var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n    exec(cmd, {cwd: cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n      if (err) cb(err);\n      if (!opt.quiet) gutil.log(stdout, stderr);\n      files.forEach(that.push.bind(that));\n      that.emit('end');\n      cb();\n    });\n  };\n\n  return through.obj(write, flush);\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/addRemote.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\nvar escape = require('any-shell-escape');\n\nmodule.exports = function (remote, url, opt, cb) {\n  if (!cb && typeof opt === 'function') {\n    // optional options\n    cb = opt;\n    opt = {};\n  }\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!url) cb(new Error('gulp-git: Repo URL is required git.addRemote(\"origin\", \"https://github.com/user/repo.git\")'));\n  if (!remote) remote = 'origin';\n  if (!opt) opt = {};\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.args) opt.args = ' ';\n\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  var cmd = 'git remote add ' + opt.args + ' ' + escape([remote, url]);\n  return exec(cmd, {cwd: opt.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n    if (err) cb(err);\n    if (!opt.quiet) gutil.log(stdout, stderr);\n    cb();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/addSubmodule.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\n\nmodule.exports = function (url, name, opt, cb) {\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!url) cb(new Error('gulp-git: Repo URL is required git.submodule.add(\"https://github.com/user/repo.git\", \"repoName\")'));\n  if (!name) name = '';\n  if (!opt) opt = {};\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.args) opt.args = '';\n\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  var cmd = 'git submodule add ' + opt.args + ' ' + url + ' ' + name;\n  return exec(cmd, {cwd: opt.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n    if (err && cb) cb(err);\n    if (!opt.quiet) gutil.log(stdout, stderr);\n    if (cb) cb();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/branch.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\nvar escape = require('any-shell-escape');\n\n// want to get the current branch instead?\n// git.revParse({args:'--abbrev-ref HEAD'})\n\nmodule.exports = function (branch, opt, cb) {\n  if (!cb && typeof opt === 'function') {\n    // optional options\n    cb = opt;\n    opt = {};\n  }\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!opt) opt = {};\n  if (!branch) return cb(new Error('gulp-git: Branch name is required git.branch(\"name\")'));\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.args) opt.args = ' ';\n\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  var cmd = 'git branch ' + opt.args + ' ' + escape([branch]);\n  return exec(cmd, {cwd: opt.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n    if (err) return cb(err);\n    if (!opt.quiet) gutil.log(stdout, stderr);\n    cb();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/catFile.js":"'use strict';\n/**\n * catFile\n * @module gulp-git/lib/catFile\n */\n\nvar through = require('through2');\nvar gutil = require('gulp-util');\nvar spawn = require('child_process').spawn;\nvar stripBom = require('strip-bom-stream');\n\n/**\n * get a buffer.\n * @callback requestCallback\n * @param {buffer} buf\n */\n\n/**\n * Convert stream to buffer\n *\n * @param   {Stream} stream stream that what to read\n * @param   {readStreamCallback} callback function that receive buffer\n * @returns {void}\n */\nfunction readStream(stream, callback) {\n  var buf;\n  stream.on('data', function(data) {\n    if (buf) {\n      buf = Buffer.concat([buf, data]);\n    } else {\n      buf = data;\n    }\n  });\n  stream.once('finish', function() {\n    if (buf) {\n      callback(buf);\n    }\n  });\n}\n\n/**\n * @typedef {object}    catFileOptions\n * @property {boolean}  stripBOM {@link https://github.com/gulpjs/vinyl-fs#optionsstripbom}\n * @property {boolean}  buffer {@link https://github.com/gulpjs/vinyl-fs#optionsbuffer}\n */\n\n/**\n * read vinyl file contents\n * @param {catFileOptions} opt [catFileOptions]{@link module:gulp-git/lib/catFile~catFileOptions}\n * @returns {stream}       stream of vinyl `File` objects.\n */\nmodule.exports = function (opt) {\n  if (!opt) opt = {};\n  if (undefined === opt.stripBOM || null === opt.stripBOM) opt.stripBOM = true;\n  if (undefined === opt.buffer || null === opt.buffer) opt.buffer = true;\n\n  /**\n   * transform function of stream {@link https://nodejs.org/docs/latest/api/stream.html#stream_transform_transform_chunk_encoding_callback}\n   *\n   * @param {vinyl}    file The file to be transformed.\n   * @param {any}      enc  encoding type.\n   * @param {function} cb   A callback function (optionally with an error argument and data) to be called after the supplied `file` has been processed.\n   * @returns {void}\n   */\n  var write = function(file, enc, cb) {\n\n    var hash = file.git && file.git.hash;\n\n    /**\n     * set file contents and send file to stream\n     *\n     * @param {Buffer} contents file contents\n     * @returns {void}\n     */\n    var sendFile = function(contents) {\n      if (contents) {\n        file.contents = contents;\n      }\n      return cb(null, file);\n    };\n\n    if (!hash || /^0+$/.test(hash)) {\n      return sendFile();\n    }\n\n    var catFile = spawn('git', ['cat-file', 'blob', hash], {\n      cwd: file.cwd\n    });\n\n    var contents = catFile.stdout;\n    var that = this;\n\n    readStream(catFile.stderr, function(error) {\n      that.emit('error', new gutil.PluginError('gulp-git', 'Command failed: ' + catFile.spawnargs.join(' ').trim() + '\\n' + error.toString()));\n    });\n\n    if (opt.stripBOM) {\n      contents = contents.pipe(stripBom());\n    }\n\n    if (opt.buffer) {\n      readStream(contents, sendFile);\n    } else {\n      sendFile(contents);\n    }\n  };\n  var stream = through.obj(write);\n  return stream;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/checkout.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\nvar escape = require('any-shell-escape');\n\nmodule.exports = function (branch, opt, cb) {\n  if (!cb && typeof opt === 'function') {\n    // optional options\n    cb = opt;\n    opt = {};\n  }\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!opt) opt = {};\n  if (!branch) throw new Error('gulp-git: Branch name is require git.checkout(\"name\")');\n  if (!opt.args) opt.args = ' ';\n  if (!opt.cwd) opt.cwd = process.cwd();\n\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  var cmd = 'git checkout ' + opt.args + ' ' + escape([branch]);\n  exec(cmd, {cwd: opt.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n    if (err) return cb(err);\n    if (!opt.quiet) gutil.log(stdout, stderr);\n    cb(null);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/checkoutFiles.js":"'use strict';\n\nvar through = require('through2');\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\nvar escape = require('any-shell-escape');\n\nmodule.exports = function (opt) {\n  if (!opt) opt = {};\n  if (!opt.args) opt.args = ' ';\n\n  function checkout(file, enc, cb) {\n    var that = this;\n    var cmd = 'git checkout ' + opt.args + ' ' + escape([file.path]);\n    if (!cb || typeof cb !== 'function') cb = function () {};\n\n    var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n    exec(cmd, {cwd: file.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n      if (err) return cb(err);\n      if (!opt.quiet) gutil.log(stdout, stderr);\n      that.push(file);\n      cb(null);\n    });\n  }\n\n  // Return a stream\n  return through.obj(checkout);\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/clean.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\nvar escape = require('any-shell-escape');\n\nmodule.exports = function (paths, opt, cb) {\n  if (!cb) {\n    if (typeof opt === 'function') {\n      // passed in 2 arguments\n      cb = opt;\n      if (typeof paths === 'object') {\n        opt = paths;\n        paths = '';\n      }\n      else opt = {};\n    }\n    else {\n      // passed in only cb\n      cb = paths;\n      paths = '';\n      opt = {};\n    }\n  }\n\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.args) opt.args = ' ';\n\n  var cmd = 'git clean ' + opt.args + ' ' + (paths.trim() ? (' -- ' + escape(paths)) : '');\n\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  return exec(cmd, { cwd: opt.cwd, maxBuffer: maxBuffer }, function (err, stdout, stderr) {\n    if (err)\n      return cb(err);\n    if (!opt.quiet)\n      gutil.log(stdout, stderr);\n    cb();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/clone.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\nvar escape = require('any-shell-escape');\n\nmodule.exports = function (remote, opt, cb) {\n  if (!cb && typeof opt === 'function') {\n    // optional options\n    cb = opt;\n    opt = {};\n  }\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!opt) opt = {};\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.args) opt.args = ' ';\n\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  var cmd = 'git clone ' + escape([remote]) + ' ' + opt.args;\n  return exec(cmd, {cwd: opt.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n    if (err) return cb(err);\n    if (!opt.quiet) gutil.log(stdout, stderr);\n    cb();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/commit.js":"'use strict';\n\nvar through = require('through2');\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\nvar escape = require('any-shell-escape');\nvar path = require('path');\n\n// want to get the current git hash instead?\n// git.revParse({args:'--short HEAD'})\n\nmodule.exports = function(message, opt) {\n  if (!opt) opt = {};\n  if (!message || message.length === 0) {\n    if (opt.args.indexOf('--amend') === -1 && opt.disableMessageRequirement !== true) {\n      throw new Error('gulp-git: Commit message is required git.commit(\"commit message\") or --amend arg must be given');\n    }\n  }\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.maxBuffer) opt.maxBuffer = 200 * 1024; // Default buffer value for child_process.exec\n  if (!opt.args) opt.args = ' ';\n\n  var files = [];\n  var paths = [];\n\n  var write = function(file, enc, cb) {\n    files.push(file);\n    paths.push(path.relative(opt.cwd, file.path).replace('\\\\', '/'));\n    cb();\n  };\n\n  var messageEntry = function(entry) {\n    return '-m \"' + entry + '\" ';\n  };\n\n  var flush = function(cb) {\n    var writeStdin = false;\n    var cmd = 'git commit ';\n\n    if (message && opt.args.indexOf('--amend') === -1) {\n\n      // Check if the message is multiline\n      if (message && message instanceof Array) {\n\n        if (opt.multiline) {\n          writeStdin = true;\n          message = message.join('\\n');\n        } else {\n          var messageExpanded = '';\n\n          // repeat -m as needed\n          for (var i = 0; i < message.length; i++) {\n            messageExpanded += messageEntry(message[i]);\n          }\n          cmd += messageExpanded + opt.args;\n        }\n        if (!opt.disableAppendPaths) {\n          cmd += ' ' + escape(paths);\n        }\n      } else {\n        if (~message.indexOf('\\n')) {\n          writeStdin = true;\n        } else {\n          cmd += '-m \"' + message + '\" ' + opt.args;\n        }\n        if (!opt.disableAppendPaths) {\n          cmd += ' ' + escape(paths);\n        }\n      }\n    } else if (opt.disableMessageRequirement === true) {\n      cmd += opt.args;\n    } else {\n      // When amending, just add the file automatically and do not include the message not the file.\n      // Also, add all the files and avoid lauching the editor (even if --no-editor was added)\n      cmd += '-a ' + opt.args + (opt.args.indexOf('--no-edit') === -1 ? ' --no-edit' : '');\n    }\n    var self = this;\n\n    // If `message` was an array and `opt.multiline` was true\n    // or was a string containing newlines, we append '-F -'\n    if (writeStdin) {\n      cmd += ' -F -';\n    }\n\n    var execChildProcess = exec(cmd, opt, function(err, stdout, stderr) {\n      if (err && (String(stdout).indexOf('no changes added to commit') === 0)) return cb(err);\n      if (!opt.quiet) gutil.log(stdout, stderr);\n      files.forEach(self.push.bind(self));\n      self.emit('end');\n      return cb();\n    });\n\n    if (writeStdin) {\n      execChildProcess.stdin.write(message);\n      execChildProcess.stdin.end();\n    }\n\n    // If the user wants, we'll emit data events during exec\n    // they can listen to them with .on('data',function(data){ });\n    // in their task\n    if (opt.emitData) {\n      execChildProcess.stdout.on('data', function(data) {\n        self.emit('data', data);\n      });\n      execChildProcess.stderr.on('data', function(data) {\n        self.emit('data', data);\n      });\n    }\n  };\n\n  return through.obj(write, flush);\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/diff.js":"'use strict';\n/**\n * diff\n * @module gulp-git/lib/diff\n */\n\nvar Vinyl = require('vinyl');\nvar through = require('through2');\nvar gutil = require('gulp-util');\nvar path = require('path');\nvar exec = require('child_process').exec;\nvar catFile = require('./catFile');\n\n// https://git-scm.com/docs/git-diff#_raw_output_format\nvar RE_DIFF_RESULT = /\\:(\\w+)\\s+(\\w+)\\s+(\\w+)(?:\\.{3})?\\s+(\\w+)(?:\\.{3})?\\s+(\\w+)(\\u0000|\\t|\\s+)(.+?)(?:\\6|\\n)(?:([^:]+?)\\6)?/g;\n\nfunction getReaslt(data) {\n  var result = [];\n  if (data && data.length) {\n    var str = data.toString();\n    var match;\n    RE_DIFF_RESULT.lastIndex = 0;\n    while ((match = RE_DIFF_RESULT.exec(str))) {\n      result.push({\n        // mode for compare \"src\"\n        srcMode: match[1],\n        // mode for compare \"dst\"\n        dstMode: match[2],\n        // sha1 for compare \"src\"\n        srcHash: match[3],\n        // sha1 for compare \"dst\"\n        dstHash: match[4],\n        // status\n        status: match[5],\n        // path for compare \"src\"\n        srcPath: match[7],\n        // path for compare \"dst\"\n        dstPath: match[8] || match[7],\n      });\n    }\n  }\n  return result;\n}\n\n/**\n * @typedef {Object} diffOptions\n * @property {string}   cwd {@link https://github.com/gulpjs/vinyl-fs#optionscwd}\n * @property {string}   base {@link https://github.com/gulpjs/vinyl-fs#optionsbase}\n * @property {boolean}  read {@link https://github.com/gulpjs/vinyl-fs#optionsread}\n * @property {boolean}  buffer {@link https://github.com/gulpjs/vinyl-fs#optionsbuffer}\n * @property {boolean}  stripBOM {@link https://github.com/gulpjs/vinyl-fs#optionsstripbom}\n * @property {boolean}  log show log in console\n * @property {string[]} args Command parameter for `git diff`\n */\n\n/**\n * get git diff result as a stream of vinyl `File` objects.\n *\n * @example\nconst git = require('gulp-git');\nconst eslint = require('gulp-eslint');\ngit.diff('--cached', {\n  args: '-- *.js'\n})\n.pipe(eslint())\n * @param {string}      compare compare arg for `git diff`\n * @param {diffOptions} opt [diffOptions]{@link module:gulp-git/lib/diff~diffOptions}\n * @returns {stream}    stream of vinyl `File` objects.\n */\nmodule.exports = function (compare, opt) {\n  if (!opt) opt = {};\n  if (!opt.cwd) opt.cwd = process.cwd();\n  // https://github.com/gulpjs/vinyl-fs#optionsread\n  if (undefined === opt.read || null === opt.read) opt.read = true;\n  if (undefined === opt.log || null === opt.log) opt.log = true;\n\n  var srcStream = through.obj();\n  var cmd = compare;\n\n  if (!/--diff-filter=/.test(opt.args)) {\n    cmd += ' --diff-filter=ACM';\n  }\n  if (opt.args) {\n    cmd += ' ' + opt.args;\n  }\n  exec('git diff --raw -z ' + cmd, {cwd: opt.cwd}, function(err, stdout) {\n    if (err) return srcStream.emit('error', err);\n    var files = getReaslt(stdout);\n\n    if (opt.log) {\n      gutil.log('git diff --name-status ' + cmd + '\\n' + files.map(function(diff) {\n        return diff.status + '\\t' + diff.dstPath;\n      }).join('\\n'));\n    }\n\n    files.forEach(function(diff) {\n      srcStream.write(new Vinyl({\n        path: path.resolve(opt.cwd, diff.dstPath),\n        cwd: opt.cwd,\n        base: opt.base,\n        git: {\n          hash: diff.dstHash,\n          diff: diff\n        }\n      }));\n    });\n    srcStream.end();\n  });\n\n  if (opt.read) {\n    // read file contents when opt.read is `true`\n    return srcStream.pipe(catFile(opt));\n  }\n\n  return srcStream;\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/exec.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\n\nmodule.exports = function (opt, cb) {\n  if (!cb && typeof opt === 'function') {\n    // optional options\n    cb = opt;\n    opt = {};\n  }\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!opt) opt = { };\n  if (!opt.log) opt.log = !cb;\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.maxBuffer) opt.maxBuffer = 200 * 1024; // Default buffer value for child_process.exec\n\n  if (!opt.args) opt.args = ' ';\n\n  var cmd = 'git ' + opt.args;\n  return exec(cmd, {cwd : opt.cwd, maxBuffer: opt.maxBuffer}, function(err, stdout, stderr) {\n    if (err) return cb(err, stderr);\n    if (opt.log && !opt.quiet) gutil.log(cmd + '\\n' + stdout, stderr);\n    else {\n      if (!opt.quiet) gutil.log(cmd + ' (log : false)', stderr);\n    }\n    cb(err, stdout);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/fetch.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\nvar escape = require('any-shell-escape');\n\nmodule.exports = function (remote, branch, opt, cb) {\n  if (!cb && typeof opt === 'function') {\n    // optional options\n    cb = opt;\n    opt = {};\n  }\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!branch) branch = '';\n  if (!opt) opt = {};\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.args) opt.args = ' ';\n  if (!remote && opt.args.indexOf('--all') === -1) remote = 'origin';\n\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  var cmd = 'git fetch ' + opt.args;\n  var args = [];\n  if (remote)\n    args.push(remote);\n  if (branch)\n    args = args.concat(branch);\n  if (args.length > 0)\n    cmd += escape(args);\n  return exec(cmd, {cwd: opt.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n    if (err) return cb(err);\n    if (!opt.quiet) gutil.log(stdout, stderr);\n    cb();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/init.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\n\nmodule.exports = function (opt, cb) {\n  if (!cb && typeof opt === 'function') {\n    // optional options\n    cb = opt;\n    opt = {};\n  }\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!opt) opt = {};\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.args) opt.args = ' ';\n\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  var cmd = 'git init ' + opt.args;\n  return exec(cmd, {cwd: opt.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n    if (err) return cb(err);\n    if (!opt.quiet) gutil.log(stdout, stderr);\n    cb();\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/merge.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\nvar escape = require('any-shell-escape');\n\nmodule.exports = function (branch, opt, cb) {\n  if (!cb && typeof opt === 'function') {\n    // optional options\n    cb = opt;\n    opt = {};\n  }\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!opt) opt = {};\n  if (!branch) return cb && cb(new Error('gulp-git: Branch name is require git.merge(\"name\")'));\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.args) opt.args = ' ';\n\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  var cmd = 'git merge ' + opt.args + ' ' + escape([branch]);\n  return exec(cmd, {cwd: opt.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n    if (err) return cb(err);\n    if (!opt.quiet) gutil.log(stdout, stderr);\n    cb();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/pull.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\nvar escape = require('any-shell-escape');\n\nmodule.exports = function (remote, branch, opt, cb) {\n  if (!cb && typeof opt === 'function') {\n    // optional options\n    cb = opt;\n    opt = {};\n  }\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!opt) opt = {};\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.args) opt.args = ' ';\n\n  var cmd = 'git pull ' + opt.args;\n  if (typeof remote === 'string') {\n    cmd += ' ' + escape(remote);\n  }\n  if (branch && typeof branch === 'string' || branch && branch[0]) {\n    cmd +=  ' ' + escape([].concat(branch));\n  }\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  return exec(cmd, {cwd: opt.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n    if (err) return cb(err);\n    if (!opt.quiet) gutil.log(stdout, stderr);\n    cb();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/push.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\nvar escape = require('any-shell-escape');\n\nmodule.exports = function (remote, branch, opt, cb) {\n\n  if (!remote) remote = 'origin';\n  if (branch === null) {\n    branch = '';\n  } else if (!branch) {\n    branch = 'master';\n  }\n  if (!cb && typeof opt === 'function') {\n    cb = opt;\n    opt = {};\n  }\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!opt) opt = {};\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.args) opt.args = ' ';\n\n  var cmd = 'git push ' + escape([].concat(remote, branch)) + ' ' + opt.args;\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  return exec(cmd, {cwd: opt.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n    if (err) return cb(err);\n    if (!opt.quiet) gutil.log(stdout, stderr);\n    cb();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/removeRemote.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\nvar escape = require('any-shell-escape');\n\nmodule.exports = function (remote, opt, cb) {\n  if (!cb && typeof opt === 'function') {\n    // optional options\n    cb = opt;\n    opt = {};\n  }\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!remote) cb(new Error('gulp-git: remote is required git.removeRemote(\"origin\")'));\n  if (!opt) opt = {};\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.args) opt.args = ' ';\n\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  var cmd = 'git remote remove ' + opt.args + ' ' + escape([remote]);\n  return exec(cmd, {cwd: opt.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n    if (err) cb(err);\n    if (!opt.quiet) gutil.log(stdout, stderr);\n    cb();\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/reset.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\nvar escape = require('any-shell-escape');\n\nmodule.exports = function (commit, opt, cb) {\n  if (!cb && typeof opt === 'function') {\n    // optional options\n    cb = opt;\n    opt = {};\n  }\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!opt) opt = {};\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.args) opt.args = ' ';\n  if (!commit) commit = ' ';\n\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  var cmd = 'git reset ' + opt.args + ' ' + escape([commit]);\n  return exec(cmd, {cwd: opt.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n    if (err) return cb(err);\n    if (!opt.quiet) gutil.log(stdout, stderr);\n    cb();\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/revParse.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\n\n/*\ngreat examples:\n`git rev-parse HEAD`: get current git hash\n`git rev-parse --short HEAD`: get short git hash\n`git rev-parse --abbrev-ref HEAD`: get current branch name\n`git rev-parse --show-toplevel`: working directory path\nsee https://www.kernel.org/pub/software/scm/git/docs/git-rev-parse.html\n*/\n\nmodule.exports = function (opt, cb) {\n  if (!cb && typeof opt === 'function') {\n    // optional options\n    cb = opt;\n    opt = {};\n  }\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!opt) opt = {};\n  if (!opt.args) opt.args = ' '; // it will likely not give you what you want\n  if (!opt.cwd) opt.cwd = process.cwd();\n\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  var cmd = 'git rev-parse ' + opt.args;\n  return exec(cmd, {cwd: opt.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n    if (err) return cb(err);\n    if (stdout) stdout = stdout.trim(); // Trim trailing cr-lf\n    if (!opt.quiet) gutil.log(stdout, stderr);\n    cb(err, stdout); // return stdout to the user\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/rm.js":"'use strict';\n\nvar through = require('through2');\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\nvar escape = require('any-shell-escape');\n\nmodule.exports = function (opt) {\n  if (!opt) opt = {};\n  if (!opt.args) opt.args = ' ';\n\n  var paths = [];\n  var files = [];\n  var fileCwd = process.cwd;\n  var write = function(file, enc, cb) {\n    paths.push(file.path);\n    files.push(file);\n    fileCwd = file.cwd;\n    cb();\n  };\n\n  var flush = function(cb) {\n    var cwd = opt.cwd || fileCwd;\n\n    var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n    var cmd = 'git rm ' + escape(paths) + ' ' + opt.args;\n    var that = this;\n    exec(cmd, {cwd: cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n      if (err) cb(err);\n      if (!opt.quiet) gutil.log(stdout, stderr);\n      files.forEach(that.push.bind(that));\n      cb();\n    });\n  };\n\n  return through.obj(write, flush);\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/stash.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\n\nmodule.exports = function(opt, cb) {\n\n  if (!cb && typeof opt === 'function') {\n    // optional options\n    cb = opt;\n    opt = {};\n  }\n\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!opt) opt = {};\n  if (!opt.args) opt.args = 'save --include-untracked \"gulp-stash\"';\n  if (!opt.cwd) opt.cwd = process.cwd();\n\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  var cmd = 'git stash ' + opt.args;\n  exec(cmd, {cwd: opt.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n    if (err) return cb(err);\n    if (!opt.quiet) gutil.log(stdout, stderr);\n    cb(null);\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/status.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\n\nmodule.exports = function (opt, cb) {\n  if (!cb && typeof opt === 'function') {\n    // optional options\n    cb = opt;\n    opt = {};\n  }\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!opt) opt = {};\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.args) opt.args = ' ';\n  if (!opt.maxBuffer) opt.maxBuffer = 200 * 1024; // Default buffer value for child_process.exec\n\n  var cmd = 'git status ' + opt.args;\n  return exec(cmd, {cwd : opt.cwd, maxBuffer: opt.maxBuffer}, function(err, stdout, stderr) {\n    if (err) return cb(err, stderr);\n    if (!opt.quiet) gutil.log(cmd + '\\n' + stdout, stderr);\n    if (cb) cb(err, stdout);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/tag.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\nvar escape = require('any-shell-escape');\n\nmodule.exports = function (version, message, opt, cb) {\n  if (!cb && typeof opt === 'function') {\n    // optional options\n    cb = opt;\n    opt = {};\n  }\n  if (!cb && typeof version === 'function') {\n    cb = version;\n    version = '';\n    message = '';\n  }\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!opt) opt = {};\n  if (!message) opt.lightWeight = true; else message = escape([message]);\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.args) opt.args = ' ';\n\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  var signedarg = opt.signed ? ' -s ' : ' -a ';\n\n  var cmd = 'git tag';\n  if (version !== '') {\n    if (!opt.lightWeight) {\n      cmd += ' ' + signedarg + ' -m ' + message + ' ';\n    }\n    cmd += opt.args + ' ' + escape([version]);\n  }\n  var templ = gutil.template(cmd, {file: message});\n  return exec(templ, {cwd: opt.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n    if (err) return cb(err);\n    if (!opt.quiet && version !== '') gutil.log(stdout, stderr);\n    if (version === '') {\n      stdout = stdout.split('\\n');\n    }\n    return cb(null, stdout);\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-gulp-git/node_modules/gulp-git/lib/updateSubmodule.js":"'use strict';\n\nvar gutil = require('gulp-util');\nvar exec = require('child_process').exec;\n\nmodule.exports = function(opt, cb) {\n  if (!cb || typeof cb !== 'function') cb = function () {};\n  if (!opt) opt = {};\n  if (!opt.cwd) opt.cwd = process.cwd();\n  if (!opt.args) opt.args = ' ';\n\n  var maxBuffer = opt.maxBuffer || 200 * 1024;\n\n  var cmd = 'git submodule update ' + opt.args;\n  return exec(cmd, {cwd: opt.cwd, maxBuffer: maxBuffer}, function(err, stdout, stderr) {\n    if (err && cb) cb(err);\n    if (!opt.quiet) gutil.log(stdout, stderr);\n    if (cb) cb();\n  });\n};\n"}